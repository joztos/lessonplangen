import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRef, useState, useEffect } from "react";
import { Toaster } from "react-hot-toast";
import DropDown from "../components/DropDown";
import Footer from "../components/Footer";
import Github from "../components/GitHub";
import Header from "../components/Header";
import LoadingDots from "../components/LoadingDots";
import parse from "html-react-parser";

const Home: NextPage = () => {
  const [loading, setLoading] = useState(false);
  const [bio, setBio] = useState("");
  const [grade, setGrade] = useState("");
  const [area, setArea] = useState("");
  const [subject, setSubject] = useState("");
  const [institution, setInstitution] = useState("");
  const [rector, setRector] = useState("");
  const [viceRector, setViceRector] = useState("");
  const [teacher, setTeacher] = useState("");
  const [skills, setSkills] = useState<string[]>([]);
  const [selectedSkills, setSelectedSkills] = useState<string[]>([]);
  const [generatedBios, setGeneratedBios] = useState<string>("");

  const bioRef = useRef<null | HTMLDivElement>(null);

  const initialSkills = [
    "Skill 1",
    "Skill 2",
    "Skill 3",
    "Skill 4",
    "Skill 5",
  ];

  useEffect(() => {
    setSkills(initialSkills);
  }, []);

  const handleSkillSelection = (skill: string) => {
    if (!selectedSkills.includes(skill)) {
      setSelectedSkills([...selectedSkills, skill]);
    } else {
      setSelectedSkills(selectedSkills.filter((s) => s !== skill));
    }
  };

  const scrollToBios = () => {
    if (bioRef.current !== null) {
      bioRef.current.scrollIntoView({ behavior: "smooth" });
    }
  };

  const generateBio = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setGeneratedBios("");
    setLoading(true);
    const response = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt: `I am creating an app that generates class plans for students. We have various student grade levels, such as First Grade, Second Grade.. All of them have their own theme for creating a class plan. Please, create a long and perfect class plan according to the student's grade level and the theme. The student's grade is ${grade}, the theme is ${bio}, the area of study is ${area}, and the subject is ${subject}. The institution is ${institution}, the rector is ${rector}, the vice-rector is ${viceRector}, and the teacher is ${teacher}. The skills are ${selectedSkills.join(", ")}.`,
      }),
    });

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    const data = await response.json();
    setGeneratedBios(data);
    scrollToBios();
    setLoading(false);
  };

  return (
    <div className="flex max-w-5xl mx-auto flex-col items-center justify-center py-2 min-h-screen">
      <Head>
        <title>Lesson Plan Generator</title>
        <meta name="description" content="Generated by AI" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <main className="flex flex-1 w-full flex-col items-center justify-center text-center px-4 mt-12 sm:mt-20">
        <a
          className="flex max-w-fit items-center justify-center space-x-2 rounded-full border border-gray-300 bg-white px-4 py-2 text-sm text-gray-600 shadow-md transition-colors hover:bg-gray-100 mb-5"
          href="https://samasat.com/"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Github />
          <p></p>
        </a>
        <h1 className="sm:text-6xl text-4xl max-w-[708px] font-bold text-slate-900">
          Generate your Lesson Plan with Navi AI
        </h1>
        <p className="text-slate-500 mt-5">
          2,118 lesson plans generated so far.
        </p>
        <div className="max-w-xl w-full">
          <form onSubmit={generateBio}>
            <label>
              Enter the topic for your lesson plan:
              <textarea value={bio} onChange={(e) => setBio(e.target.value)} />
            </label>
            <DropDown
              label="Grado Escolar"
              selectedOption={grade}
              options={[
                "Primero de Primaria",
                "Segundo de Primaria",
                "Tercero de Primaria",
                "Cuarto de Primaria",
                "Quinto de Primaria",
                "Sexto de Primaria",
                "Primero de Secundaria",
                "Segundo de Secundaria",
                "Tercero de Secundaria",
                "Primero de Preparatoria",
                "Segundo de Preparatoria",
                "Tercero de Preparatoria",
              ]}
              onSelectOption={setGrade}
            />
            <DropDown
              label="Área de Estudio"
              selectedOption={area}
              options={[
                "Matemáticas",
                "Ciencias Sociales",
                "Ciencias Naturales",
                "Lengua Extranjera",
                "Lengua y Literatura",
                "Educación Cultural y Artística",
                "Educación Física",
                "Interdisciplinar",
              ]}
              onSelectOption={setArea}
            />
            <DropDown
              label="Asignatura"
              selectedOption={subject}
              options={[
                "Subnivel Básico Elemental",
                "Subnivel Básico Media",
                "Subnivel Bachillerato Superior",
                "Subnivel Bachillerato Superior",
              ]}
              onSelectOption={setSubject}
            />
            <label>
              Enter the Institution name:
              <input type="text" value={institution} onChange={(e) => setInstitution(e.target.value)} />
            </label>
            <label>
              Enter the Rector name:
              <input type="text" value={rector} onChange={(e) => setRector(e.target.value)} />
            </label>
            <label>
              Enter the Vice-rector name:
              <input type="text" value={viceRector} onChange={(e) => setViceRector(e.target.value)} />
            </label>
            <label>
              Enter the Teacher name:
              <input type="text" value={teacher} onChange={(e) => setTeacher(e.target.value)} />
            </label>
            <div>
              <h2>Select Skills:</h2>
              {skills.map((skill, index) => (
                <div key={index}>
                  <input type="checkbox" id={`skill${index}`} checked={selectedSkills.includes(skill)} onChange={() => handleSkillSelection(skill)} />
                  <label htmlFor={`skill${index}`}>{skill}</label>
                </div>
              ))}
            </div>
            <button type="submit">Generate Lesson Plan</button>
          </form>
          <div>
            <h2>Generated Plan:</h2>
            {generatedBios && parse(generatedBios)}
          </div>
        </div>
        <Toaster
          position="top-center"
          reverseOrder={false}
          toastOptions={{ duration: 2000 }}
        />
      </main>
      <Footer />
    </div>
  );
};

export default Home;
